.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Graph::Easy::Base 3"
.TH Graph::Easy::Base 3 "2014-04-12" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Graph::Easy::Base \- base class for Graph::Easy objects like nodes, edges etc
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&        package Graph::Easy::My::Node;
\&        use Graph::Easy::Base;
\&        @ISA = qw/Graph::Easy::Base/;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Used automatically and internally by Graph::Easy \- should not be used
directly.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 1
\&        my $object = Graph::Easy::Base\->new();
.Ve
.PP
Create a new object, and call \f(CW\*(C`_init()\*(C'\fR on it.
.SS "\fIerror()\fP"
.IX Subsection "error()"
.Vb 1
\&        $last_error = $object\->error();
\&
\&        $object\->error($error);                 # set new messags
\&        $object\->error(\*(Aq\*(Aq);                     # clear the error
.Ve
.PP
Returns the last error message, or '' for no error.
.PP
When setting a new error message, \f(CW\*(C`$self\->_croak($error)\*(C'\fR will be called
unless \f(CW\*(C`$object\->no_fatal_errors()\*(C'\fR is true.
.SS "\fIerror_as_html()\fP"
.IX Subsection "error_as_html()"
.Vb 1
\&        my $error = $object\->error_as_html();
.Ve
.PP
Returns the same error message as \fIerror()\fR, but properly escaped
as \s-1HTML\s0 so it is safe to output to the client.
.SS "\fIwarn()\fP"
.IX Subsection "warn()"
.Vb 1
\&        $object\->warn(\*(AqWarning!\*(Aq);
.Ve
.PP
Warn on \s-1STDERR\s0 with the given message.
.SS "\fIno_fatal_errors()\fP"
.IX Subsection "no_fatal_errors()"
.Vb 1
\&        $object\->no_fatal_errors(1);
.Ve
.PP
Set the flag that determines whether setting an error message
via \f(CW\*(C`error()\*(C'\fR is fatal, e.g. results in a call to \f(CW\*(C`_croak()\*(C'\fR.
.PP
A true value will make errors non-fatal. See also fatal_errors.
.SS "\fIfatal_errors()\fP"
.IX Subsection "fatal_errors()"
.Vb 3
\&        $fatal = $object\->fatal_errors();
\&        $object\->fatal_errors(0);               # turn off
\&        $object\->fatal_errors(1);               # turn on
.Ve
.PP
Set/get the flag that determines whether setting an error message
via \f(CW\*(C`error()\*(C'\fR is fatal, e.g. results in a call to \f(CW\*(C`_croak()\*(C'\fR.
.PP
A true value makes errors fatal.
.SS "\fIcatch_errors()\fP"
.IX Subsection "catch_errors()"
.Vb 2
\&        my $catch_errors = $object\->catch_errors();     # query
\&        $object\->catch_errors(1);                       # enable
\&
\&        $object\->...();                                 # some error
\&        if ($object\->error())
\&          {
\&          my @errors = $object\->errors();               # retrieve
\&          }
.Ve
.PP
Enable/disable catching of all error messages. When enabled,
all previously caught error messages are thrown away, and from this
poin on new errors are non-fatal and stored internally. You can
retrieve these errors later with the \fIerrors()\fR method.
.SS "\fIcatch_warnings()\fP"
.IX Subsection "catch_warnings()"
.Vb 2
\&        my $catch_warns = $object\->catch_warnings();    # query
\&        $object\->catch_warnings(1);                     # enable
\&
\&        $object\->...();                                 # some error
\&        if ($object\->warning())
\&          {
\&          my @warnings = $object\->warnings();           # retrieve
\&          }
.Ve
.PP
Enable/disable catching of all warnings. When enabled, all previously
caught warning messages are thrown away, and from this poin on new
warnings are stored internally. You can retrieve these errors later
with the \fIerrors()\fR method.
.SS "\fIcatch_messages()\fP"
.IX Subsection "catch_messages()"
.Vb 4
\&        # catch errors and warnings
\&        $object\->catch_messages(1);
\&        # stop catching errors and warnings
\&        $object\->catch_messages(0);
.Ve
.PP
A true parameter is equivalent to:
.PP
.Vb 2
\&        $object\->catch_warnings(1);
\&        $object\->catch_errors(1);
.Ve
.PP
See also: \fIcatch_warnings()\fR and \fIcatch_errors()\fR as well as
\&\fIerrors()\fR and \fIwarnings()\fR.
.SS "\fIerrors()\fP"
.IX Subsection "errors()"
.Vb 1
\&        my @errors = $object\->errors();
.Ve
.PP
Return all error messages that occured after \fIcatch_messages()\fR was
called.
.SS "\fIwarnings()\fP"
.IX Subsection "warnings()"
.Vb 1
\&        my @warnings = $object\->warnings();
.Ve
.PP
Return all warning messages that occured after \fIcatch_messages()\fR
or \fIcatch_errors()\fR was called.
.SS "\fIself()\fP"
.IX Subsection "self()"
.Vb 1
\&        my $self = $object\->self();
.Ve
.PP
Returns the object itself.
.SS "\fIclass()\fP"
.IX Subsection "class()"
.Vb 1
\&        my $class = $object\->class();
.Ve
.PP
Returns the full class name like \f(CW\*(C`node.cities\*(C'\fR. See also \f(CW\*(C`sub_class\*(C'\fR.
.SS "\fIsub_class()\fP"
.IX Subsection "sub_class()"
.Vb 1
\&        my $sub_class = $object\->sub_class();
.Ve
.PP
Returns the sub class name like \f(CW\*(C`cities\*(C'\fR. See also \f(CW\*(C`class\*(C'\fR.
.SS "\fImain_class()\fP"
.IX Subsection "main_class()"
.Vb 1
\&        my $main_class = $object\->main_class();
.Ve
.PP
Returns the main class name like \f(CW\*(C`node\*(C'\fR. See also \f(CW\*(C`sub_class\*(C'\fR.
.SH "EXPORT"
.IX Header "EXPORT"
None by default.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Graph::Easy.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (C) 2004 \- 2008 by Tels <http://bloodgate.com>.
.PP
See the \s-1LICENSE\s0 file for more details.
.PP

.IX Xref "tels bloodgate license gpl"
