.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Graph::Easy::Layout::Path 3"
.TH Graph::Easy::Layout::Path 3 "2014-04-12" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Graph::Easy::Layout::Path \- Path management for Manhattan\-style grids
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Graph::Easy;
\&        
\&        my $graph = Graph::Easy\->new();
\&
\&        my $bonn = Graph::Easy::Node\->new(
\&                name => \*(AqBonn\*(Aq,
\&        );
\&        my $berlin = Graph::Easy::Node\->new(
\&                name => \*(AqBerlin\*(Aq,
\&        );
\&
\&        $graph\->add_edge ($bonn, $berlin);
\&
\&        $graph\->layout();
\&
\&        print $graph\->as_ascii( );
\&
\&        # prints:
\&
\&        # +\-\-\-\-\-\-+     +\-\-\-\-\-\-\-\-+
\&        # | Bonn | \-\-> | Berlin |
\&        # +\-\-\-\-\-\-+     +\-\-\-\-\-\-\-\-+
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Graph::Easy::Layout::Scout\*(C'\fR contains just the actual path-managing code for
Graph::Easy, e.g. to create/destroy/maintain paths, node
placement etc.
.SH "EXPORT"
.IX Header "EXPORT"
Exports nothing.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Graph::Easy.
.SH "METHODS into Graph::Easy"
.IX Header "METHODS into Graph::Easy"
This module injects the following methods into \f(CW\*(C`Graph::Easy\*(C'\fR:
.SS "\fI_path_is_clear()\fP"
.IX Subsection "_path_is_clear()"
.Vb 1
\&        $graph\->_path_is_clear($path);
.Ve
.PP
For all points (x,y pairs) in the path, check that the cell is still free.
\&\f(CW$path\fR points to a list x,y,type pairs as in \f(CW\*(C`[ [x,y,type], [x,y,type], ...]\*(C'\fR.
.SS "\fI_create_cell()\fP"
.IX Subsection "_create_cell()"
.Vb 1
\&        my $cell = $graph\->($edge,$x,$y,$type);
.Ve
.PP
Create a cell at \f(CW\*(C`$x,$y\*(C'\fR coordinates with type \f(CW$type\fR for the specified
edge.
.SS "\fI_path_is_clear()\fP"
.IX Subsection "_path_is_clear()"
.Vb 1
\&        $graph\->_path_is_clear();
.Ve
.PP
For all points (x,y pairs) in the path, check that the cell is still free.
\&\f(CW$path\fR points to a list of \f(CW\*(C`[ x,y,type, x,y,type, ...]\*(C'\fR.
.PP
Returns true when the path is clear, false otherwise.
.SS "\fI_trace_path()\fP"
.IX Subsection "_trace_path()"
.Vb 1
\&        my $path = my $graph\->_trace_path($src,$dst,$edge);
.Ve
.PP
Find a free way from source node/group to destination node/group for the
specified edge. Both source and destination need to be placed beforehand.
.SH "METHODS in Graph::Easy::Node"
.IX Header "METHODS in Graph::Easy::Node"
This module injects the following methods into \f(CW\*(C`Graph::Easy::Node\*(C'\fR:
.SS "\fI_near_places()\fP"
.IX Subsection "_near_places()"
.Vb 1
\&        my $node\->_near_places();
.Ve
.PP
Take a node and return a list of possible placements around it and
prune out already occupied cells. \f(CW$d\fR is the distance from the node
border and defaults to two (for placements). Set it to one for
adjacent cells.
.SS "\fI_shuffle_dir()\fP"
.IX Subsection "_shuffle_dir()"
.Vb 1
\&        my $dirs = $node\->_shuffle_dir( [ 0,1,2,3 ], $dir);
.Ve
.PP
Take a ref to an array with four entries and shuffle them around according to
\&\f(CW$dir\fR.
.SS "\fI_shift()\fP"
.IX Subsection "_shift()"
.Vb 1
\&        my $dir = $node\->_shift($degrees);
.Ve
.PP
Return a the \f(CW\*(C`flow()\*(C'\fR direction shifted by X degrees to \f(CW$dir\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (C) 2004 \- 2007 by Tels <http://bloodgate.com>.
.PP
See the \s-1LICENSE\s0 file for information.
